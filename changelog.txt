2024/9/19 9:30
refactor: change wait_for_service rule in check_robot_status.cpp
 - remove wait_for_service at initialization
 - increase wait_for_service timeout to 5s at status_check()

2024/9/16 17:30
refactor: change wait_for_service rule in check_robot_status.cpp
 - check only once when initializing cehck_robot_status_node

2024/9/13 16:20
fix: allow termination even during navgation in check_robot_status.cpp

2024/9/11 8:20
refactor: add robot_status & robot_ip in register_robot service request

2024/9/9 15:30
feat: register robot thru service /fitparam when bringup

2024/9/7 13:40
refactor: combine master_node node and check_robot_status_node into master.launch.py
 - usage(simulation): ros2 launch fitrobotcpp master.launch.py sim:=true

2024/9/6 23:40
refactor: remove tf warning from NAV_PREPARE to NAV_READY
 - add additional robot_status in fitrobot_interace package: NAV_PREPARE_TO_READY
 - add initialpose_callback in master_node to trigger NAV_PREPARE_TO_READY

2024/9/6 16:20
fix: use_sim_time parameter casting bug in run_navigation_async & run_slam_async

2024/9/6 15:30
refactor: namespaced master_node from ROBOT_INFO env variable
- master_node
  1 namedspaced provoded by ROBOT_INFO env variable without issuing ros arguments in cli
  2 add ensure_robotstatus_slam() in slam_callback and update check_robot_status_node's robot_status topic
  3 extract method: parse_robot_info() for ROBOT_INFO parsing
- check_robot_status_node
  1. Use add_on_set_parameters_callback to receive parameter change from master_node (mainly SLAM status)
- Add summary.md. Please see details for fitrobot services usage
