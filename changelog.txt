2024/10/13 15:00
perf/fix: optimize check_robot_status & master_master_node_wpf2 to eliminate blocking 
          between each other using mutex lock & correct callback_group for callbacks
 - check_robot_status
   1. Use callback_group reentrant instead of mutually_exclusive for both sub_follow_wp_ & sub_nav_to_pose_
   2. Solve robot_status 21/11 order issue by adding mutex
      navigate_to_pose_goal_status_callback wait 1s for waypoints_callback_received_ flag
 - master_node_wpf2
   1. Changed callback_groups
    - cancel_task_srv: MU -> RE
    - nav_to_pose_client_: none -> MU
    - follow_waypoints_client_: none -> MU
   2. Add resultCallbackGotopose for GoToPose
   3. hangel cansleep_ & station_pub_ & target_station more carefully
   4. only call startup_nav in several places if is_bt_navigator_active is false
   5. Add more debug messages


2024/10/10 22:00
feat: add master_node_wpf2.cpp
 - use more mutex locks to handle thread safety & efficiency (on-going)
 - how to launch: ros2 run fitrobotcpp master_wpf2

2024/10/8 23:50
fix: remove duplicated dependency on ROBOT_INFO in check_robot_status
  - use get_effective_namespace() to get namespace directly

2024/10/8 17:30
fix: publish target_station when go back home

2024/10/8 16:00
feat: add target_station topic publisher

2024/10/8 13:30
fix: async client timeout issue
 issue1: in status_check, register_robot_client timeout after async_send_request
   fix: in line "timer_ = this->create_wall_timer..."
        add service_cbg_RE
 issue2: in status_check, multiple pause lifecycle nodes
   fix: move line 
          "is_deactivated_ = true" 
        before line 
          "lifecycle_manage_cmd("pause");" in status_check()
 issue3: in lifecycle_nav_callback, all request by lfm_nav_client will timeout
   fix: in line " lifecycle_nav_service_ = this->create_service..."
        change service_cbg_MU to service_cbg_RE 
        THIS IS A IMPORTANT LEARNING
 issue4: param_clients_ timeout in initialpose_callback
   fix: add line before line "initialpose_sub_ = this->create_subscription..."
          sub_options.callback_group = service_cbg_MU;

2024/10/8 08:30
fix: sleep when state change to NAV_WF_COMPLETED(23)
 1 description
  - expected: sleep only after finally going back home
  - issue: sleep right after NVA_WF_COMPLETED before going back home
 2 master_node_wpf
  - use get_parameter_bool to read cansleep_ at waypointFollowerCallback instaed of at the class initialization
  - set waypointfollower callbackgroup to MutuallyExclusive

2024/10/7 16:20
feat: override waypointfollower service. Use stationlist info if only station name is given.
- usage example:
  ros2 service call /lino2_1234/waypointfollower fitrobot_interfaces/srv/WaypointFollower "{station:{name: Station-00A}}"

2024/10/7 13:30
feat: add service for selecting stationlist as future usage
 - rely on nlohmann_json library
 - add service robot_param_srv to accept request from app clients
   interface: fitrobot_interfaces::srv::Para1
   usage example:
     ros2 service call /lino2_1234/robotparam fitrobot_interfaces/srv/Para1 "{
       parameter1_name: select_stationlist,
       parameter1_value: {use_sim: true, map_key: turtlebot3_world/lino2, station_key: two_stations}}"
 - add client list_station_client_ to request ListStation service

2024/10/7 10:00
feat: disable sleep during whole wf navigation if can_sleep=true
 - rename enable_sleep to can_sleep
 - only go to sleep after going home

2024/10/6 16:20
feat: allow for cancel task at any index
 - use deque instaed of queue to allow get/set/pop at certain index


2024/10/5 22:40
feat: implement go to home when no task left

2024/10/5 13:45
feat: followWaypoints can handle enable_sleep=true case
 - if robot is deactivated, followWaypoints will activate before start wf navigation
 - during the wf navigation, robot will not be deactivated

2024/10/5 13:00
feat/fix: first attempt to merge fitrobot's waypoint_follower.py into master_node_wpf.cpp
 - reduce cpu usage from 2x% to 2% during waypoint_follow navigation
 - replace executable="master_node" to "master_wpf" in master.launch.py in fitrobot if you want to test it
 - fix: state sometimes change to NAV_WF_RUNNING when it should be NAV_RUNNING or others
      change timeout from 0.1s to 1s in check_tf in is_tf_odom_map_existed() in check_robot_status.cpp



2024/10/4 16:30
feat: add waypoint_follower subscriber in master_node
 - usage
   ros2 topic pub -1 /lino2_1234/goalposes geometry_msgs/msg/PoseArray \
   "{header: {frame_id: map}, poses: [{position: {x: 1.5, y: 0.5}, orientation: {z: 0.707, w: 0.707}}, \
                                     {position: {x: 0.5, y: -0.5}, orientation: {z: 0.707, w: 0.707}}, \
                                     {position: {x: -0.5, y: -0.5}, orientation: {z: 0.707, w: 0.707}} \
   ]}"

2024/10/4 12:00
perf: set nav2 nodes to pause state while not running
 - Add enable_sleep parameter to check_robot_status
   if set to true, check_robot_status will pause all nav2 lifecycle nodes while not running
 - Add topic goalpose to resume nodes before start navigation

2024/10/3 14:50
feat: Add service lifecycle_nav to manage lifecycle_manager_navigation statues

2024/10/2 11:10
perf: replace vector with unordered_set of robot_status in check_robot_status.cpp
 - suggested by gpt when asking for performance improvement

2024/9/30 18:30
refactor: update each robot status whenever possible
 - check_robot_status.cpp
  - add update_robot() function
  - refactor navigate_to_pose_goal_status_callback & follower_waypoints_status_callback
 - master_node.cpp
  - remove launch_service_active flag check in cleanup

2024/9/30 16:30
fix: modify check_nav2_running & check_slam_running
 - considering robot namespace
 - move no-used code into archive/ folder

2024/9/19 9:30
refactor: change wait_for_service rule in check_robot_status.cpp
 - remove wait_for_service at initialization
 - increase wait_for_service timeout to 5s at status_check()

2024/9/16 17:30
refactor: change wait_for_service rule in check_robot_status.cpp
 - check only once when initializing cehck_robot_status_node

2024/9/13 16:20
fix: allow termination even during navgation in check_robot_status.cpp

2024/9/11 8:20
refactor: add robot_status & robot_ip in register_robot service request

2024/9/9 15:30
feat: register robot thru service /fitparam when bringup

2024/9/7 13:40
refactor: combine master_node node and check_robot_status_node into master.launch.py
 - usage(simulation): ros2 launch fitrobotcpp master.launch.py sim:=true

2024/9/6 23:40
refactor: remove tf warning from NAV_PREPARE to NAV_READY
 - add additional robot_status in fitrobot_interace package: NAV_PREPARE_TO_READY
 - add initialpose_callback in master_node to trigger NAV_PREPARE_TO_READY

2024/9/6 16:20
fix: use_sim_time parameter casting bug in run_navigation_async & run_slam_async

2024/9/6 15:30
refactor: namespaced master_node from ROBOT_INFO env variable
- master_node
  1 namedspaced provoded by ROBOT_INFO env variable without issuing ros arguments in cli
  2 add ensure_robotstatus_slam() in slam_callback and update check_robot_status_node's robot_status topic
  3 extract method: parse_robot_info() for ROBOT_INFO parsing
- check_robot_status_node
  1. Use add_on_set_parameters_callback to receive parameter change from master_node (mainly SLAM status)
- Add summary.md. Please see details for fitrobot services usage
